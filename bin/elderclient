#!/usr/bin/env php
<?php

ini_set('memory_limit', '512M');
set_time_limit(0);

// the bin could be somewhere we don't expect
$paths = [
	__DIR__ . "/../autoload.php",
	__DIR__ . "/../vendor/autoload.php",
	__DIR__ . "/../../vendor/autoload.php",
	__DIR__ . "/../../../vendor/autoload.php",
	__DIR__ . "/../../../../vendor/autoload.php",
];

$included = false;

foreach ($paths as $path) {
	if (file_exists($path)) {
		require_once $path;
		$included = true;
		break;
	}
}

if (!$included) {
	throw new RuntimeException('Autoload failed. Do you need to run composer install?');
}

// Load and parse all configuration.
$elderConfig = \Symfony\Component\Yaml\Yaml::parse('elderclient.yml');
$service = $elderConfig['elderUrl'];

$tree = load($elderConfig['pages']);
$pages = [];
findAllPages($tree, $pages);

// Process Page nodes, writing rendered md documents into "content".
$http = new \GuzzleHttp\Client([
    'base_uri' => $elderConfig['elderUrl'],
	'timeout'  => 5.0,
	'connect_timeout' => 2.0,
]);
foreach ($pages as $page) {
	echo sprintf('Processing "%s"' . PHP_EOL, $page->path);
	$path = sprintf('article/%s/%s/%s', $page->version, $page->locale, $page->kb);

	try {
		$response = $http->request('POST', $path, [
			'json' => [
				'tokens' => $elderConfig['tokens'],
			]
		]);
	} catch (\Exception $e) {
		echo sprintf('Failed to generate "%s": "%s"', $page->path, $e->getMessage());
		continue;
	}
	$body = (string)$response->getBody();
	$extraFrontMatter = array_merge($page->meta, [
		'notoc' => true,
	]);

	$parser = new Mni\FrontYAML\Parser();
	$document = $parser->parse($body, false);
	$mdContent = $document->getContent();
	$frontMatter = \Symfony\Component\Yaml\Yaml::dump(array_merge($document->getYAML(), $extraFrontMatter), 999999);

	$md =<<<EOF
---
$frontMatter
---
$mdContent
EOF;

	file_put_contents($page->path, $md);
}

/**
 * Loads the 'pages' structure converting it to Dir & Page tree.
 *
 * @param array $spec Pages array
 * @return Dir Root directory node
 */
function load($spec) {
	$root = new Dir();
	$root->load($spec);
	return $root;
}

/**
 * Descends into the page tree and finds all pages.
 *
 * @param Node $node Root node to search from
 * @param array $list Resulting list of all Page nodes
 */
function findAllPages($node, &$list = null) {
	foreach($node->children as $child) {
		if (get_class($child)==='Dir') {
			findAllPages($child, $list);
		} else {
			$list[] = $child;
		}
	}
}

/**
 * Node is a building block of a page tree built from an array.
 * This allows us to traverse the structure more easily, and work with nested paths.
 * This will allow us to generate the entire md structure more easily later.
 */
abstract class Node {
	public $path;
	public $parent;
	public $children = [];

	public function __construct($path = '.', $parent = null) {
		$this->path = $path;
		$this->parent = $parent;
	}

	abstract public function load($children);
}

class Dir extends Node {
	public function load($children) {
		foreach ($children as $name => $children) {
			$path = sprintf('%s/%s', $this->path, $name);
			if (empty($children['kb'])) {
				// Must be directory if it has no 'kb' entry.
				$node = new Dir($path, $this);
			} else {
				$node = new Page($path . '.md', $this);
			}
			$this->children[] = $node;
			$node->load($children);
		}
	}
}

class Page extends Node {
	public $kb;
	public $locale;
	public $version;
	public $meta;

	public function load($children) {
		$this->kb = $children['kb'];
		$this->locale = !empty($children['locale']) ? $children['locale'] : 'en_NZ';
		$this->version = !empty($children['version']) ? $children['version'] : 'master';
		$this->meta = !empty($children['meta']) ? $children['meta'] : [];
	}
}
